<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
       <!-- 启用注解 -->
       <context:annotation-config/>
       <!-- 只能保证了静态资源不被springmvc的DispatcherServlet拦截 -->
       <!-- 已经在spring-context.xml中扫描除Controller外的所有注解,所以这里只扫描Controller,且要把已经扫描过的service排除 -->
       <context:component-scan base-package="cc.doublez">
              <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
              <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
              <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
       </context:component-scan>
       <!-- 视图解析器 -->

      <!-- <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
              <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
              <property name="contentType" value="text/html"/>
              <property name="prefix" value="/WEB-INF/views/"/>
              <property name="suffix" value=".jsp"/>
       </bean>-->

       <bean id="viewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
              <property name="cache" value="true"/>
              <property name="prefix" value=""/>
              <property name="suffix" value=".vm"/>
              <property name="contentType" value="text/html;charset=UTF-8" />
              <property name="toolboxConfigLocation" value="/WEB-INF/toolbox.xml" />
              <property name="exposeSpringMacroHelpers" value="true" />
              <property name="exposeRequestAttributes" value="true" />
              <property name="exposeSessionAttributes" value="true" />
              <property name="viewClass" value="cc.doublez.velocity.VelocityToolsView"></property>
       </bean>
       <bean id= "validator"
             class= "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
              <property name= "providerClass"  value= "org.hibernate.validator.HibernateValidator"/>
              <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
              <property name= "validationMessageSource" ref= "messageSource"/>
       </bean>

       <!-- 国际化(本系统中主要用于显示/错误消息定制) -->
       <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
              <property name="basenames">
                     <list>
                            <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找  -->
                            <!-- ReloadableResourceBundleMessageSource加载时,
                            默认使用DefaultResourceLoader,他会先判断资源path是否带有classpath:前缀,如果有,用 ClassPathResource去加载资源文件,
                            如果没有试着用文件协议的url去访问,再没有就在contextPath即WEB-INF下查找。 -->
                            <value>classpath:messages</value>
                            <value>classpath:org/hibernate/validator/ValidationMessages</value>
                     </list>
              </property>
              <property name="useCodeAsDefaultMessage" value="false"/>
              <property name="defaultEncoding" value="UTF-8"/>
              <property name="cacheSeconds" value="60"/>
       </bean>

       <mvc:annotation-driven validator="validator">
              <mvc:message-converters register-defaults="true">
                     <ref bean="fastJsonHttpMessageConverter"/>
              </mvc:message-converters>
       </mvc:annotation-driven>
       <!-- 消息转换器 -->
       <bean id="fastJsonHttpMessageConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
              <property name="supportedMediaTypes">
                     <list>
                            <value>application/json;charset=UTF-8</value>
                            <value>test/html;charset=UTF-8</value>
                            <value>text/plain;charset=UTF-8</value>
                     </list>
              </property>
              <property name="features">
                     <array>
                            <value>WriteMapNullValue</value>
                     </array>
              </property>
       </bean>

       <!-- 控制器异常处理 -->
       <bean id="exceptionHandlerExceptionResolver"
             class="org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"/>

       <!--配置拦截器 -->
       <mvc:interceptors>
              <mvc:interceptor>
                     <mvc:mapping path="/x3i9ze7w/**"/>
                     <ref bean="interceptor"/>
              </mvc:interceptor>
              <mvc:interceptor>
                     <mvc:mapping path="/**"/>
                     <mvc:exclude-mapping path="/x3i9ze7w/login"/>
                     <ref bean="loginInterceptor"/>
              </mvc:interceptor>
       </mvc:interceptors>
       <bean id="interceptor" class="cc.doublez.platform.interceptor.TestInterceptor"/>
       <bean id="loginInterceptor" class="cc.doublez.platform.interceptor.LoginInterceptor"/>
       <bean id= "multipartResolver" class= "org.springframework.web.multipart.commons.CommonsMultipartResolver ">
              <!--
               <property name= "maxUploadSize" value= "104857600"/>
              -->
       </bean>
       <!-- 通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller -->
       <aop:aspectj-autoproxy proxy-target-class="true" />
</beans>